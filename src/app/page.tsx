'use client';

import { useState } from 'react';
import { useDispatch } from 'react-redux';
import {
  Container,
  Typography,
  Fab,
  Box,
  CircularProgress,
  Alert,
  Button,
} from '@mui/material';

import AddIcon from '@mui/icons-material/Add';
import RefreshIcon from '@mui/icons-material/Refresh';
import { addCity } from './store/slices/citiesSlice';
import { City } from './types/weather';
import CityCard from './components/CItyCard/CityCard';
import AddCityDialog from './components/AddCityDialog/AddCityDialog';
import { useCities } from './hooks/useCities';

export default function HomePage() {
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const dispatch = useDispatch();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä–æ–¥–∞–º–∏
  const { cities, refreshAllCitiesWeather } = useCities();

  const handleAddCity = (city: City) => {
    dispatch(addCity(city));
    setIsAddDialogOpen(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
  const handleRefreshAllWeather = async () => {
    setIsRefreshing(true);
    try {
      await refreshAllCitiesWeather();
    } finally {
      setIsRefreshing(false);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Box display="flex" alignItems="center" justifyContent="space-between" mb={4}>
        <Typography variant="h3" component="h1" gutterBottom>
          –ü–æ–≥–æ–¥–∞ —É –≤–∞—à–∏—Ö –º—ñ—Å—Ç–∞—Ö
        </Typography>
        
        {cities.length > 0 && (
          <Button
            variant="outlined"
            startIcon={isRefreshing ? <CircularProgress size={20} /> : <RefreshIcon />}
            onClick={handleRefreshAllWeather}
            disabled={isRefreshing}
            sx={{ minWidth: 200 }}
          >
            {isRefreshing ? '–û–Ω–æ–≤–ª–µ–Ω–Ω—è...' : '–û–Ω–æ–≤–∏—Ç–∏ –≤—Å—é –ø–æ–≥–æ–¥—É'}
          </Button>
        )}
      </Box>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã */}
      {isRefreshing && (
        <Alert severity="info" sx={{ mb: 3 }}>
          üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≥–æ–¥—É –¥–ª—è –≤—Å—ñ—Ö –º—ñ—Å—Ç... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.
        </Alert>
      )}

      {cities.length === 0 ? (
        <Box textAlign="center" py={8}>
          <Typography variant="h6" color="text.secondary" gutterBottom>
            –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –º—ñ—Å—Ç
          </Typography>
          <Typography variant="body1" color="text.secondary">
            –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É &quot;+&quot; —â–æ–± –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–µ –º—ñ—Å—Ç–æ
          </Typography>
        </Box>
      ) : (
        <Box display="flex" flexWrap="wrap" gap={3}>
          {cities.map(city => (
            <Box key={city.id} sx={{ width: { xs: '100%', sm: 'calc(50% - 12px)', md: 'calc(33.333% - 16px)' } }}>
              <CityCard city={city} />
            </Box>
          ))}
        </Box>
      )}

      <Fab
        color="primary"
        aria-label="–¥–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ"
        sx={{
          position: 'fixed',
          bottom: 24,
          right: 24,
        }}
        onClick={() => setIsAddDialogOpen(true)}
      >
        <AddIcon />
      </Fab>

      <AddCityDialog
        open={isAddDialogOpen}
        onClose={() => setIsAddDialogOpen(false)}
        onAddCity={handleAddCity}
      />
    </Container>
  );
}
