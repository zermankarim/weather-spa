'use client';

import { useParams, useRouter } from 'next/navigation';
import { useSelector } from 'react-redux';
import {
  Container,
  Typography,
  Card,
  CardContent,
  Box,
  IconButton,
  Button,
  Chip,
  Paper,
  Skeleton,
  Alert,
  useTheme,
  alpha,
  Tooltip,
  Fade,
  useMediaQuery,
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Water as WaterIcon,
  Air as AirIcon,
  Compress as CompressIcon,
  WbSunny as SunIcon,
  Visibility as VisibilityIcon,
  LocationOn as LocationIcon,
  Schedule as TimeIcon,
  TrendingUp as MaxTempIcon,
  TrendingDown as MinTempIcon,
  Refresh as RefreshIcon,
} from '@mui/icons-material';
import { RootState } from '@/app/store';
import {
  useGetHourlyForecastQuery,
  useGetWeatherByCoordsQuery,
} from '@/app/store/api/weatherApi';
import WeatherChart from '@/app/components/WeatherChart/WeatherChart';
import { useState } from 'react';

export default function CityDetailPage() {
  const params = useParams();
  const router = useRouter();
  const theme = useTheme();
  const cityId = params.id as string;
  const [isRefreshing, setIsRefreshing] = useState(false);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.down('md'));

  const city = useSelector((state: RootState) =>
    state.cities.cities.find(c => c.id === cityId),
  );

  const {
    data: weatherData,
    isLoading: isWeatherLoading,
    error: weatherError,
    refetch: refetchWeather,
  } = useGetWeatherByCoordsQuery(
    { lat: city?.lat || 0, lon: city?.lon || 0 },
    {
      skip: !city,
    },
  );

  const {
    data: forecastData,
    isLoading: isForecastLoading,
    error: forecastError,
    refetch: refetchForecast,
  } = useGetHourlyForecastQuery(
    { lat: city?.lat || 0, lon: city?.lon || 0 },
    {
      skip: !city,
    },
  );

  const handleRefresh = async () => {
    setIsRefreshing(true);
    try {
      await Promise.all([refetchWeather(), refetchForecast()]);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
    } finally {
      setIsRefreshing(false);
    }
  };

  if (!city) {
    return (
      <Container maxWidth="md" sx={{ py: { xs: 2, sm: 3, md: 4 } }}>
        <Paper
          elevation={0}
          sx={{
            p: { xs: 3, sm: 4, md: 6 },
            textAlign: 'center',
            bgcolor: alpha(theme.palette.error.main, 0.05),
            border: `1px dashed ${alpha(theme.palette.error.main, 0.3)}`,
            borderRadius: 3,
          }}
        >
          <LocationIcon
            sx={{
              fontSize: { xs: 48, sm: 56, md: 64 },
              color: theme.palette.error.main,
              mb: 2,
            }}
          />
          <Typography
            variant={isMobile ? "h6" : "h5"}
            color="error"
            gutterBottom
          >
            üèôÔ∏è –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
          </Typography>
          <Typography variant="body1" color="text.secondary" paragraph>
            –ú–æ–∂–ª–∏–≤–æ, –º—ñ—Å—Ç–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞
          </Typography>
          <Button
            variant="contained"
            onClick={() => router.push('/')}
            sx={{ mt: 2, borderRadius: 2 }}
          >
            üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
          </Button>
        </Paper>
      </Container>
    );
  }

  const weather = weatherData || city.weather;

  const getWeatherIcon = (iconCode?: string) => {
    if (!iconCode) return 'üå§Ô∏è';
    return `https://openweathermap.org/img/wn/${iconCode}@4x.png`;
  };

  const formatUnixTime = (timestamp: number) => {
    return new Date(timestamp * 1000).toLocaleTimeString('uk-UA', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getTemperatureColor = (temp: number) => {
    if (temp < 0) return theme.palette.primary.main;
    if (temp < 10) return theme.palette.info.main;
    if (temp < 25) return theme.palette.success.main;
    if (temp < 35) return theme.palette.warning.main;
    return theme.palette.error.main;
  };

  const formatLastUpdated = () => {
    if (!city.lastUpdated) return '';
    const now = Date.now();
    const diff = now - city.lastUpdated;
    const minutes = Math.floor(diff / (1000 * 60));

    if (minutes < 1) return '—â–æ–π–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ';
    if (minutes < 60) return `–æ–Ω–æ–≤–ª–µ–Ω–æ ${minutes} —Ö–≤ —Ç–æ–º—É`;

    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `–æ–Ω–æ–≤–ª–µ–Ω–æ ${hours} –≥–æ–¥ —Ç–æ–º—É`;

    return `–æ–Ω–æ–≤–ª–µ–Ω–æ ${Math.floor(hours / 24)} –¥–Ω —Ç–æ–º—É`;
  };

  return (
    <Container maxWidth="lg" sx={{ py: { xs: 2, sm: 3, md: 4 } }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∞–∑–∞–¥ */}
      <Box
        display="flex"
        alignItems="center"
        justifyContent="space-between"
        mb={{ xs: 2, sm: 3, md: 4 }}
        flexDirection={isMobile ? 'column' : 'row'}
        gap={isMobile ? 2 : 0}
      >
        <Box display="flex" alignItems="center" width={isMobile ? '100%' : 'auto'}>
          <Tooltip title="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥" arrow>
            <IconButton
              onClick={() => router.push('/')}
              sx={{
                mr: 2,
                bgcolor: alpha(theme.palette.primary.main, 0.1),
                '&:hover': {
                  bgcolor: alpha(theme.palette.primary.main, 0.2),
                },
              }}
              size={isMobile ? "medium" : "large"}
            >
              <ArrowBackIcon />
            </IconButton>
          </Tooltip>
          <Box flex={1}>
            <Box display="flex" alignItems="center" gap={1} mb={1}>
              <LocationIcon color="primary" />
              <Typography
                variant={isMobile ? "h4" : "h3"}
                component="h1"
                fontWeight={600}
                sx={{ wordBreak: 'break-word' }}
              >
                {city.name}
              </Typography>
            </Box>
            <Box
              display="flex"
              alignItems="center"
              gap={2}
              flexDirection={isMobile ? 'column' : 'row'}
              alignSelf={isMobile ? 'flex-start' : 'center'}
            >
              <Typography variant="h6" color="text.secondary">
                üåç {city.country}
              </Typography>
              {city.lastUpdated && (
                <Chip
                  icon={<TimeIcon />}
                  label={formatLastUpdated()}
                  size="small"
                  variant="outlined"
                  color="primary"
                />
              )}
            </Box>
          </Box>
        </Box>

        <Tooltip title="–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ" arrow>
          <IconButton
            onClick={handleRefresh}
            disabled={isRefreshing || isWeatherLoading}
            sx={{
              bgcolor: alpha(theme.palette.success.main, 0.1),
              '&:hover': {
                bgcolor: alpha(theme.palette.success.main, 0.2),
              },
            }}
            size={isMobile ? "medium" : "large"}
          >
            <RefreshIcon />
          </IconButton>
        </Tooltip>
      </Box>

      {/* –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ */}
      {(weatherError || forecastError) && (
        <Fade in timeout={500}>
          <Alert
            severity="error"
            sx={{ mb: { xs: 2, sm: 3, md: 4 } }}
            action={
              <Button
                color="inherit"
                size="small"
                onClick={handleRefresh}
                disabled={isRefreshing}
              >
                –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
              </Button>
            }
          >
            –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.
            {weatherData && (
              <Box mt={1}>
                <Typography variant="body2">
                  –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ.
                </Typography>
              </Box>
            )}
          </Alert>
        </Fade>
      )}

      {weather && (
        <Box display="flex" flexDirection="column" gap={{ xs: 2, sm: 3, md: 4 }}>
          {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–≥–æ–¥—É */}
          <Box flex={1}>
            <Card
              elevation={6}
              sx={{
                height: '100%',
                background: `linear-gradient(135deg, ${alpha(getTemperatureColor(weather.main.temp), 0.1)} 0%, ${alpha(theme.palette.background.paper, 0.9)} 100%)`,
                overflow: 'hidden',
                position: 'relative',
                '&::before': {
                  content: '""',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  height: '4px',
                  background: `linear-gradient(90deg, ${getTemperatureColor(weather.main.temp)}, ${alpha(getTemperatureColor(weather.main.temp), 0.6)})`,
                },
              }}
            >
              <CardContent sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
                {isWeatherLoading ? (
                  <Box textAlign="center">
                    <Skeleton
                      variant="circular"
                      width={isMobile ? 80 : isTablet ? 100 : 120}
                      height={isMobile ? 80 : isTablet ? 100 : 120}
                      sx={{ mx: 'auto', mb: 2 }}
                    />
                    <Skeleton
                      variant="text"
                      width={isMobile ? 150 : isTablet ? 180 : 200}
                      height={isMobile ? 40 : isTablet ? 50 : 60}
                      sx={{ mx: 'auto', mb: 1 }}
                    />
                    <Skeleton
                      variant="text"
                      width={isMobile ? 120 : isTablet ? 140 : 150}
                      height={isMobile ? 25 : isTablet ? 28 : 30}
                      sx={{ mx: 'auto' }}
                    />
                  </Box>
                ) : (
                  <Fade in timeout={500}>
                    <Box
                      display="flex"
                      alignItems="center"
                      justifyContent="center"
                      flexDirection="column"
                    >
                      <img
                        src={getWeatherIcon(weather.weather[0]?.icon)}
                        alt={weather.weather[0]?.description}
                        style={{
                          width: isMobile ? 100 : isTablet ? 120 : 140,
                          height: isMobile ? 100 : isTablet ? 120 : 140,
                          filter: 'drop-shadow(0 4px 8px rgba(0,0,0,0.15))',
                        }}
                      />
                      <Typography
                        variant="h1"
                        component="div"
                        sx={{
                          fontSize: { xs: '3rem', sm: '3.5rem', md: '4.5rem' },
                          fontWeight: 200,
                          color: getTemperatureColor(weather.main.temp),
                          lineHeight: 1,
                          mb: 1,
                        }}
                      >
                        {Math.round(weather.main.temp)}¬∞
                      </Typography>
                      <Typography
                        variant={isMobile ? "h6" : "h5"}
                        color="text.primary"
                        gutterBottom
                        sx={{
                          textTransform: 'capitalize',
                          fontWeight: 500,
                          mb: 2,
                          textAlign: 'center',
                        }}
                      >
                        üå§Ô∏è {weather.weather[0]?.description}
                      </Typography>
                      <Typography
                        variant={isMobile ? "body1" : "h6"}
                        color="text.secondary"
                        sx={{ mb: 3, textAlign: 'center' }}
                      >
                        –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫{' '}
                        <span
                          style={{
                            color: getTemperatureColor(weather.main.feels_like),
                            fontWeight: 600,
                          }}
                        >
                          {Math.round(weather.main.feels_like)}¬∞
                        </span>
                      </Typography>

                      {/* –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ */}
                      <Box
                        display="flex"
                        flexWrap="wrap"
                        justifyContent="center"
                        gap={{ xs: 1, sm: 2, md: 3 }}
                        sx={{ width: '100%' }}
                      >
                        <Chip
                          icon={<MaxTempIcon />}
                          label={`–ú–∞–∫—Å: ${Math.round(weather.main.temp_max)}¬∞`}
                          variant="outlined"
                          size={isMobile ? "small" : "medium"}
                        />
                        <Chip
                          icon={<MinTempIcon />}
                          label={`–ú—ñ–Ω: ${Math.round(weather.main.temp_min)}¬∞`}
                          variant="outlined"
                          size={isMobile ? "small" : "medium"}
                        />
                      </Box>
                    </Box>
                  </Fade>
                )}
              </CardContent>
            </Card>
          </Box>

          {/* –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
          <Box flex={1}>
            <Box display="flex" flexDirection="column" gap={{ xs: 1, sm: 2 }}>
              <Box>
                <Paper
                  elevation={3}
                  sx={{
                    p: { xs: 1.5, sm: 2, md: 2.5 },
                    height: '100%',
                    transition: 'all 0.3s ease',
                    '&:hover': {
                      transform: 'translateY(-2px)',
                      boxShadow: theme.shadows[8],
                    },
                  }}
                >
                  <Box display="flex" alignItems="center" gap={1.5} mb={1}>
                    <WaterIcon color="info" fontSize={isMobile ? "medium" : "large"} />
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        –í–æ–ª–æ–≥—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è
                      </Typography>
                      <Typography variant={isMobile ? "h6" : "h5"} fontWeight="bold">
                        {weather.main.humidity}%
                      </Typography>
                    </Box>
                  </Box>
                </Paper>
              </Box>

              <Box>
                <Paper
                  elevation={3}
                  sx={{
                    p: { xs: 1.5, sm: 2, md: 2.5 },
                    height: '100%',
                    transition: 'all 0.3s ease',
                    '&:hover': {
                      transform: 'translateY(-2px)',
                      boxShadow: theme.shadows[8],
                    },
                  }}
                >
                  <Box display="flex" alignItems="center" gap={1.5} mb={1}>
                    <CompressIcon color="warning" fontSize={isMobile ? "medium" : "large"} />
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∏–π —Ç–∏—Å–∫
                      </Typography>
                      <Typography variant={isMobile ? "h6" : "h5"} fontWeight="bold">
                        {Math.round(weather.main.pressure * 0.75)} –º–º
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {weather.main.pressure} –≥–ü–∞
                      </Typography>
                    </Box>
                  </Box>
                </Paper>
              </Box>

              <Box>
                <Paper
                  elevation={3}
                  sx={{
                    p: { xs: 1.5, sm: 2, md: 2.5 },
                    height: '100%',
                    transition: 'all 0.3s ease',
                    '&:hover': {
                      transform: 'translateY(-2px)',
                      boxShadow: theme.shadows[8],
                    },
                  }}
                >
                  <Box display="flex" alignItems="center" gap={1.5} mb={1}>
                    <AirIcon color="success" fontSize={isMobile ? "medium" : "large"} />
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É
                      </Typography>
                      <Typography variant={isMobile ? "h6" : "h5"} fontWeight="bold">
                        {weather.wind.speed} –º/—Å
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        –ù–∞–ø—Ä—è–º–æ–∫: {weather.wind.deg}¬∞
                      </Typography>
                    </Box>
                  </Box>
                </Paper>
              </Box>

              <Box>
                <Paper
                  elevation={3}
                  sx={{
                    p: { xs: 1.5, sm: 2, md: 2.5 },
                    height: '100%',
                    transition: 'all 0.3s ease',
                    '&:hover': {
                      transform: 'translateY(-2px)',
                      boxShadow: theme.shadows[8],
                    },
                  }}
                >
                  <Box display="flex" alignItems="center" gap={1.5} mb={1}>
                    <VisibilityIcon color="info" fontSize={isMobile ? "medium" : "large"} />
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        –í–∏–¥–∏–º—ñ—Å—Ç—å
                      </Typography>
                      <Typography variant={isMobile ? "h6" : "h5"} fontWeight="bold">
                        {weather.visibility ? `${Math.round(weather.visibility / 1000)} –∫–º` : '–ù/–î'}
                      </Typography>
                    </Box>
                  </Box>
                </Paper>
              </Box>
            </Box>
          </Box>

          {/* –°–æ–Ω—è—á–Ω—ñ –≥–æ–¥–∏–Ω–∏ */}
          <Box>
            <Paper
              elevation={3}
              sx={{
                p: { xs: 2, sm: 3, md: 4 },
                background: `linear-gradient(135deg, ${alpha(theme.palette.warning.main, 0.1)} 0%, ${alpha(theme.palette.background.paper, 0.9)} 100%)`,
              }}
            >
              <Box display="flex" alignItems="center" gap={2} mb={2}>
                <SunIcon color="warning" fontSize={isMobile ? "medium" : "large"} />
                <Typography variant={isMobile ? "h6" : "h5"} fontWeight="bold">
                  –°–æ–Ω—è—á–Ω—ñ –≥–æ–¥–∏–Ω–∏
                </Typography>
              </Box>
              <Box display="flex" flexDirection="column" gap={2}>
                <Box display="flex" alignItems="center" gap={2}>
                  <Typography variant="body2" color="text.secondary">
                    üåÖ –°—Ö—ñ–¥:
                  </Typography>
                  <Typography variant="body1" fontWeight="medium">
                    {formatUnixTime(weather.sys.sunrise)}
                  </Typography>
                </Box>
                <Box display="flex" alignItems="center" gap={2}>
                  <Typography variant="body2" color="text.secondary">
                    üåá –ó–∞—Ö—ñ–¥:
                  </Typography>
                  <Typography variant="body1" fontWeight="medium">
                    {formatUnixTime(weather.sys.sunset)}
                  </Typography>
                </Box>
              </Box>
            </Paper>
          </Box>

          {/* –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É */}
          <Box>
            <Paper
              elevation={3}
              sx={{
                p: { xs: 2, sm: 3, md: 4 },
                background: `linear-gradient(135deg, ${alpha(theme.palette.info.main, 0.1)} 0%, ${alpha(theme.palette.background.paper, 0.9)} 100%)`,
              }}
            >
              <Box display="flex" alignItems="center" gap={2} mb={3}>
                <Typography variant={isMobile ? "h6" : "h5"} fontWeight="bold">
                  üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏
                </Typography>
              </Box>
              <WeatherChart
                data={forecastData?.list || []}
                isLoading={isForecastLoading}
              />
            </Paper>
          </Box>
        </Box>
      )}
    </Container>
  );
}
