import { useEffect, useCallback } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '@/app/store';
import { updateCityWeather } from '@/app/store/slices/citiesSlice';
import { City, WeatherData } from '@/app/types/weather';

export const useCities = () => {
  const dispatch = useDispatch();
  const cities = useSelector((state: RootState) => state.cities.cities);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
  const updateCityWeatherData = useCallback(async (city: City) => {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?lat=${city.lat}&lon=${city.lon}&appid=${process.env.NEXT_PUBLIC_WEATHER_API_KEY}&units=metric&lang=uk`
      );
      
      if (response.ok) {
        const weatherData: WeatherData = await response.json();
        const updatedCity: City = {
          ...city,
          weather: weatherData,
          lastUpdated: Date.now(),
        };
        dispatch(updateCityWeather(updatedCity));
      }
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è –º—ñ—Å—Ç–∞ ${city.name}:`, error);
    }
  }, [dispatch]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
  const refreshAllCitiesWeather = useCallback(async () => {
    if (cities.length === 0) return;

    console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è –≤—Å—ñ—Ö –º—ñ—Å—Ç...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const updatePromises = cities.map(city => updateCityWeatherData(city));
    
    try {
      await Promise.allSettled(updatePromises);
      console.log('‚úÖ –ü–æ–≥–æ–¥–∞ –¥–ª—è –≤—Å—ñ—Ö –º—ñ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏:', error);
    }
  }, [cities, updateCityWeatherData]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    if (cities.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–≥–æ–¥—É (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç)
      const shouldUpdate = cities.some(city => {
        if (!city.lastUpdated) return true;
        const timeDiff = Date.now() - city.lastUpdated;
        const thirtyMinutes = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        return timeDiff > thirtyMinutes;
      });

      if (shouldUpdate) {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏...');
        refreshAllCitiesWeather();
      } else {
        console.log('‚ÑπÔ∏è –î–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –∞–∫—Ç—É–∞–ª—å–Ω—ñ, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ');
      }
    }
  }, [cities, refreshAllCitiesWeather]); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  return {
    cities,
    refreshAllCitiesWeather,
    updateCityWeatherData,
  };
};
